#include <iostream>

int hello(int x);

int main() 
{
    int result = hello(5);
    std::cout << "Result: " << result << std::endl;
    return 0;
}


/*
1)Если скомпилировать оба файла разом, без определения функции hello хотя бы в одном из них, то даст ошибку: undefined reference to `hello(int)'
Это означает что компилятор не знает что это за функция, поскольку нет её определения.

2)Если скомпилировать оба файла разом, то ошибок не будет поскольку компилятор и линковщик могут найти определение функции hello в файле f.cpp.

3)Если скомпилировать только main.cpp то снова выдаст ошибку: undefined reference to `hello(int)'
Это означает что компилятор не знает что это за функция, поскольку нет её определения.

4)Если скомпилировать оба файла разом, добавив к определению функции hello модификатор static, то даст ошибку: undefined reference to `hello(int)'
Модификатор static делает функцию видной только в пределах файла в котором она определена. Поэтому компилятор не может найти определение фукции hello нигде.
*/


static int hello(int x)
{
    return x * 2;
}

/*
5)Всё будет работать поскольку функция hello определена в файле main.cpp

6)В финальный executable попадёт только одна копия тела функции hello, поскольку линковщик будет использовать только одну версию для всех ссылок на неё в программе.
*/